/*
 * This file is autogenerated by wuschl. Don't make any changes to it,
 * as they might be overwritten.
 */
#ifndef OSCUTILS_ADDR_SPLIT_TEST_H
#define OSCUTILS_ADDR_SPLIT_TEST_H

#define _GNU_SOURCE 1

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

struct testcase {
	char *input;
	size_t input_len;
	char *output;
	size_t output_len;
	int ret;
};

struct testcase testcases[] = {

	{
		.input = "\x00\x66\x6f\x6f",
		.input_len = 4,
		.output = "\x41\x64\x64\x72\x65\x73\x73\x20\x69\x73\x20\x72\x65\x61\x6c\x6c\x79\x20\x69\x6e\x76\x61\x6c\x69\x64\x2e\x0a",
		.output_len = 27,
		.ret = 1
	},

	{
		.input = "\x2f\x66\x6f\x5b\x2f\x2f\x66\x6f\x72\x2f\x62\x72\x72\x2f\x62\x72\xf0\x5b\x61\x2f\x66\x6f\x5b\x2f\x5b\x5c\x72\x2f\x62\x72\x14\x62\x61\x5c\x72\x2f\x62\x72\x14\x62\x61\x7a\xf0\x7a",
		.input_len = 44,
		.output = "\x52\x65\x61\x64\x20\x61\x64\x64\x72\x65\x73\x73\x20\x22\x2f\x66\x6f\x5b\x2f\x2f\x66\x6f\x72\x2f\x62\x72\x72\x2f\x62\x72\xf0\x5b\x61\x2f\x66\x6f\x5b\x2f\x5b\x5c\x72\x2f\x62\x72\x14\x62\x61\x5c\x72\x2f\x62\x72\x14\x62\x61\x7a\xf0\x7a\x22\x0a\x53\x70\x6c\x69\x74\x20\x61\x64\x64\x72\x65\x73\x73\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x39\x20\x66\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x74\x6f\x6b\x65\x6e\x73\x3a\x0a\x22\x66\x6f\x5b\x22\x0a\x22\x22\x0a\x22\x66\x6f\x72\x22\x0a\x22\x62\x72\x72\x22\x0a\x22\x62\x72\xf0\x5b\x61\x22\x0a\x22\x66\x6f\x5b\x22\x0a\x22\x5b\x5c\x72\x22\x0a\x22\x62\x72\x14\x62\x61\x5c\x72\x22\x0a\x22\x62\x72\x14\x62\x61\x7a\xf0\x7a\x22\x0a",
		.output_len = 165,
		.ret = 0
	},

	{
		.input = "\x2f\x66\x2f\x6f\x2f\x62\x61\x72\x2f\x62\x61\x7a\x0a",
		.input_len = 13,
		.output = "\x52\x65\x61\x64\x20\x61\x64\x64\x72\x65\x73\x73\x20\x22\x2f\x66\x2f\x6f\x2f\x62\x61\x72\x2f\x62\x61\x7a\x22\x0a\x53\x70\x6c\x69\x74\x20\x61\x64\x64\x72\x65\x73\x73\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x34\x20\x66\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x74\x6f\x6b\x65\x6e\x73\x3a\x0a\x22\x66\x22\x0a\x22\x6f\x22\x0a\x22\x62\x61\x72\x22\x0a\x22\x62\x61\x7a\x22\x0a",
		.output_len = 91,
		.ret = 0
	},

	{
		.input = "\x2f\x66\x6f\x6f\x39\x39\x39\x39\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x77\x95\x8d\x8d\x8d\x78\x8d\x7b\x8d\xa4\x8d\xe9\x8d\x8d\xa4\x8d\x64\x8d\x8d\x8d\x8d\x4d\x4d\x53\x4d\x4d\x4d\x4d\x45\x4d\x4d\x4d\x4d\x4d\x4d\x4d\x39\x39\x39\x39\x39\x39\x4d\x4d\x41\x4d\x4d\x4d\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\x8d\x8d\x62\x77\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\xa4\x8d\xe9\x8d\x8d\xa4\x8d\x64\x8d\x8d\x8d\x8d\x2b\x4d\x53\x4d\x4d\x7e\x8d\x39\x8d\xa4\x01\x1d",
		.input_len = 132,
		.output = "\x52\x65\x61\x64\x20\x61\x64\x64\x72\x65\x73\x73\x20\x22\x2f\x66\x6f\x6f\x39\x39\x39\x39\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x2f\x77\x95\x8d\x8d\x8d\x78\x8d\x7b\x8d\xa4\x8d\xe9\x8d\x8d\xa4\x8d\x64\x8d\x8d\x8d\x8d\x4d\x4d\x53\x4d\x4d\x4d\x4d\x45\x4d\x4d\x4d\x4d\x4d\x4d\x4d\x39\x39\x39\x39\x39\x39\x4d\x4d\x41\x4d\x4d\x4d\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\x8d\x8d\x62\x77\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\xa4\x8d\xe9\x8d\x8d\xa4\x8d\x64\x8d\x8d\x8d\x8d\x2b\x4d\x53\x4d\x4d\x7e\x8d\x39\x8d\xa4\x01\x1d\x22\x0a\x53\x70\x6c\x69\x74\x20\x61\x64\x64\x72\x65\x73\x73\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x33\x33\x20\x66\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x74\x6f\x6b\x65\x6e\x73\x3a\x0a\x22\x66\x6f\x6f\x39\x39\x39\x39\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x22\x0a\x22\x77\x95\x8d\x8d\x8d\x78\x8d\x7b\x8d\xa4\x8d\xe9\x8d\x8d\xa4\x8d\x64\x8d\x8d\x8d\x8d\x4d\x4d\x53\x4d\x4d\x4d\x4d\x45\x4d\x4d\x4d\x4d\x4d\x4d\x4d\x39\x39\x39\x39\x39\x39\x4d\x4d\x41\x4d\x4d\x4d\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\x8d\x8d\x62\x77\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\xa4\x8d\xe9\x8d\x8d\xa4\x8d\x64\x8d\x8d\x8d\x8d\x2b\x4d\x53\x4d\x4d\x7e\x8d\x39\x8d\xa4\x01\x1d\x22\x0a",
		.output_len = 390,
		.ret = 0
	},

	{
		.input = "\x2f\x66\x6f\x6f\x2f\x62\x61\x72\x2f\x62\x61\x7a",
		.input_len = 12,
		.output = "\x52\x65\x61\x64\x20\x61\x64\x64\x72\x65\x73\x73\x20\x22\x2f\x66\x6f\x6f\x2f\x62\x61\x72\x2f\x62\x61\x7a\x22\x0a\x53\x70\x6c\x69\x74\x20\x61\x64\x64\x72\x65\x73\x73\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x33\x20\x66\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x74\x6f\x6b\x65\x6e\x73\x3a\x0a\x22\x66\x6f\x6f\x22\x0a\x22\x62\x61\x72\x22\x0a\x22\x62\x61\x7a\x22\x0a",
		.output_len = 89,
		.ret = 0
	},

	{
		.input = "\x2f\x66\x6f\x6f\x2f\x66\x6f\x6f\x2f\x62\x61\x72\x2f\x62\x61\x7a\x34\x62\x61\x72\x2f\x62\x61\x7a\x0a",
		.input_len = 25,
		.output = "\x52\x65\x61\x64\x20\x61\x64\x64\x72\x65\x73\x73\x20\x22\x2f\x66\x6f\x6f\x2f\x66\x6f\x6f\x2f\x62\x61\x72\x2f\x62\x61\x7a\x34\x62\x61\x72\x2f\x62\x61\x7a\x22\x0a\x53\x70\x6c\x69\x74\x20\x61\x64\x64\x72\x65\x73\x73\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x35\x20\x66\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x74\x6f\x6b\x65\x6e\x73\x3a\x0a\x22\x66\x6f\x6f\x22\x0a\x22\x66\x6f\x6f\x22\x0a\x22\x62\x61\x72\x22\x0a\x22\x62\x61\x7a\x34\x62\x61\x72\x22\x0a\x22\x62\x61\x7a\x22\x0a",
		.output_len = 117,
		.ret = 0
	},

	{
		.input = "\x2f\x00\x6f\x6f",
		.input_len = 4,
		.output = "\x52\x65\x61\x64\x20\x61\x64\x64\x72\x65\x73\x73\x20\x22\x2f\x22\x0a\x53\x70\x6c\x69\x74\x20\x61\x64\x64\x72\x65\x73\x73\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x31\x20\x66\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x74\x6f\x6b\x65\x6e\x73\x3a\x0a\x22\x22\x0a",
		.output_len = 63,
		.ret = 0
	},

	{
		.input = "\x2f\x66\x6f\x00",
		.input_len = 4,
		.output = "\x52\x65\x61\x64\x20\x61\x64\x64\x72\x65\x73\x73\x20\x22\x2f\x66\x6f\x22\x0a\x53\x70\x6c\x69\x74\x20\x61\x64\x64\x72\x65\x73\x73\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x31\x20\x66\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x74\x6f\x6b\x65\x6e\x73\x3a\x0a\x22\x66\x6f\x22\x0a",
		.output_len = 67,
		.ret = 0
	},

	{
		.input = "\x2f\x66\x6f\x6f\x2f\x00\x61\x72",
		.input_len = 8,
		.output = "\x52\x65\x61\x64\x20\x61\x64\x64\x72\x65\x73\x73\x20\x22\x2f\x66\x6f\x6f\x2f\x22\x0a\x53\x70\x6c\x69\x74\x20\x61\x64\x64\x72\x65\x73\x73\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x32\x20\x66\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x74\x6f\x6b\x65\x6e\x73\x3a\x0a\x22\x66\x6f\x6f\x22\x0a\x22\x22\x0a",
		.output_len = 73,
		.ret = 0
	},

	{
		.input = "\xaf\x66\x6f\x6f\x2f\x62\x61\x72\x2f\x62\x61\x7a\x0a",
		.input_len = 13,
		.output = "\x41\x64\x64\x72\x65\x73\x73\x20\x69\x73\x20\x72\x65\x61\x6c\x6c\x79\x20\x69\x6e\x76\x61\x6c\x69\x64\x2e\x0a",
		.output_len = 27,
		.ret = 1
	},

	{
		.input = "\x2f\x66\x00\x6f",
		.input_len = 4,
		.output = "\x52\x65\x61\x64\x20\x61\x64\x64\x72\x65\x73\x73\x20\x22\x2f\x66\x22\x0a\x53\x70\x6c\x69\x74\x20\x61\x64\x64\x72\x65\x73\x73\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x31\x20\x66\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x74\x6f\x6b\x65\x6e\x73\x3a\x0a\x22\x66\x22\x0a",
		.output_len = 65,
		.ret = 0
	},

	{
		.input = "\x2f\x66\x6f\x6f\x00\x62\x61\x72",
		.input_len = 8,
		.output = "\x52\x65\x61\x64\x20\x61\x64\x64\x72\x65\x73\x73\x20\x22\x2f\x66\x6f\x6f\x22\x0a\x53\x70\x6c\x69\x74\x20\x61\x64\x64\x72\x65\x73\x73\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x31\x20\x66\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x74\x6f\x6b\x65\x6e\x73\x3a\x0a\x22\x66\x6f\x6f\x22\x0a",
		.output_len = 69,
		.ret = 0
	},

	{
		.input = "\x2f\x66\x8d\x78\x39\x39\x39\x39\x3d\x39\x39\x39\x45\x8d\x64\x39\x39\x29\x39\x39\x8d\x7b\x8d\xab\x8d\x7e\x8d\x8d\xa4\x8d\xff\x80\x8d\xa4\x78\x72\x39\x39\x45\x62\x77\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\xa4\x8d\xe9\x8d\x8d\xa4\x8d\x64\x8d\x8d\x8d\x8d\x4d\x4d\x53\x4d\x4d\x4d\x4d\x45\x4d\x4d\x4d\x4d\x4d\x4d\x4d\x39\x39\x39\x39\x39\x39\x4d\x4d\x41\x4d\x4d\x4d\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\x8d\x8d\x62\x77\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\xa4\x8d\xe9\x8d\x8d\xa4\x8d\x64\x8d\x8d\x8d\x8d\x2b\x4d\x53\x4d\x4d\x7e\x8d\x39\x8d\xa4\x01\x1d",
		.input_len = 132,
		.output = "\x52\x65\x61\x64\x20\x61\x64\x64\x72\x65\x73\x73\x20\x22\x2f\x66\x8d\x78\x39\x39\x39\x39\x3d\x39\x39\x39\x45\x8d\x64\x39\x39\x29\x39\x39\x8d\x7b\x8d\xab\x8d\x7e\x8d\x8d\xa4\x8d\xff\x80\x8d\xa4\x78\x72\x39\x39\x45\x62\x77\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\xa4\x8d\xe9\x8d\x8d\xa4\x8d\x64\x8d\x8d\x8d\x8d\x4d\x4d\x53\x4d\x4d\x4d\x4d\x45\x4d\x4d\x4d\x4d\x4d\x4d\x4d\x39\x39\x39\x39\x39\x39\x4d\x4d\x41\x4d\x4d\x4d\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\x8d\x8d\x62\x77\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\xa4\x8d\xe9\x8d\x8d\xa4\x8d\x64\x8d\x8d\x8d\x8d\x2b\x4d\x53\x4d\x4d\x7e\x8d\x39\x8d\xa4\x01\x1d\x22\x0a\x53\x70\x6c\x69\x74\x20\x61\x64\x64\x72\x65\x73\x73\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x31\x20\x66\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x74\x6f\x6b\x65\x6e\x73\x3a\x0a\x22\x66\x8d\x78\x39\x39\x39\x39\x3d\x39\x39\x39\x45\x8d\x64\x39\x39\x29\x39\x39\x8d\x7b\x8d\xab\x8d\x7e\x8d\x8d\xa4\x8d\xff\x80\x8d\xa4\x78\x72\x39\x39\x45\x62\x77\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\xa4\x8d\xe9\x8d\x8d\xa4\x8d\x64\x8d\x8d\x8d\x8d\x4d\x4d\x53\x4d\x4d\x4d\x4d\x45\x4d\x4d\x4d\x4d\x4d\x4d\x4d\x39\x39\x39\x39\x39\x39\x4d\x4d\x41\x4d\x4d\x4d\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\x8d\x8d\x62\x77\x78\x8d\x8d\x8d\x78\x8d\x7b\x8d\xa4\x8d\xe9\x8d\x8d\xa4\x8d\x64\x8d\x8d\x8d\x8d\x2b\x4d\x53\x4d\x4d\x7e\x8d\x39\x8d\xa4\x01\x1d\x22\x0a",
		.output_len = 325,
		.ret = 0
	},

	{
		.input = "\x2f\x66\x6f\x6f\x2f\x62\x61\x7a\x0a",
		.input_len = 9,
		.output = "\x52\x65\x61\x64\x20\x61\x64\x64\x72\x65\x73\x73\x20\x22\x2f\x66\x6f\x6f\x2f\x62\x61\x7a\x22\x0a\x53\x70\x6c\x69\x74\x20\x61\x64\x64\x72\x65\x73\x73\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x32\x20\x66\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x74\x6f\x6b\x65\x6e\x73\x3a\x0a\x22\x66\x6f\x6f\x22\x0a\x22\x62\x61\x7a\x22\x0a",
		.output_len = 79,
		.ret = 0
	},

	{
		.input = "\x2f\x6b\x2f\x6b\xff\xff\xff\xff\x2f\xff\xff\xff\x7f\x2f\x62\x2f\x16\xf4\x6b\x2f\x6b\xff\xff\x2f\xff\x07\xff\x7f\x2f\x62\x2f\x17\x01\xf3\x2f\x6b\xff\xff\xff\xff\x2f\xff\xff\xff\x7f\x2f\x62\x2f\x16\xf4\x6b\x2f\x6b\xff\xff\x2f\xff\x07\xff\x7f\x2f\x62\x2f\x17",
		.input_len = 64,
		.output = "\x52\x65\x61\x64\x20\x61\x64\x64\x72\x65\x73\x73\x20\x22\x2f\x6b\x2f\x6b\xff\xff\xff\xff\x2f\xff\xff\xff\x7f\x2f\x62\x2f\x16\xf4\x6b\x2f\x6b\xff\xff\x2f\xff\x07\xff\x7f\x2f\x62\x2f\x17\x01\xf3\x2f\x6b\xff\xff\xff\xff\x2f\xff\xff\xff\x7f\x2f\x62\x2f\x16\xf4\x6b\x2f\x6b\xff\xff\x2f\xff\x07\xff\x7f\x2f\x62\x2f\x17\x22\x0a\x53\x70\x6c\x69\x74\x20\x61\x64\x64\x72\x65\x73\x73\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x31\x37\x20\x66\x6f\x6c\x6c\x6f\x77\x69\x6e\x67\x20\x74\x6f\x6b\x65\x6e\x73\x3a\x0a\x22\x6b\x22\x0a\x22\x6b\xff\xff\xff\xff\x22\x0a\x22\xff\xff\xff\x7f\x22\x0a\x22\x62\x22\x0a\x22\x16\xf4\x6b\x22\x0a\x22\x6b\xff\xff\x22\x0a\x22\xff\x07\xff\x7f\x22\x0a\x22\x62\x22\x0a\x22\x17\x01\xf3\x22\x0a\x22\x6b\xff\xff\xff\xff\x22\x0a\x22\xff\xff\xff\x7f\x22\x0a\x22\x62\x22\x0a\x22\x16\xf4\x6b\x22\x0a\x22\x6b\xff\xff\x22\x0a\x22\xff\x07\xff\x7f\x22\x0a\x22\x62\x22\x0a\x22\x17\x22\x0a",
		.output_len = 222,
		.ret = 0
	},

};

static int test(FILE *input, FILE *output);

static int run_testcase(int id, bool verbose)
{
	struct testcase *t = &testcases[id];
	char *output = NULL;
	size_t output_len = 0;
	FILE *o = open_memstream(&output, &output_len);
	FILE *i = fmemopen(t->input, t->input_len, "r");

	int ret = test(i,o);

	fflush(o);
	fclose(o);

	if (output_len != t->output_len
	    || memcmp(output, t->output, output_len)) {
		printf("Test %d failed, output differs.\n", id);
		if (verbose) {
			printf("Expected output:\n%.*s", (int)t->output_len, t->output);
			printf("Received output:\n%.*s\n", (int)output_len, output);
		}
		free(output);
		return 1;
	} else if (verbose) {
		printf("Output matches.\n");
	}

	free(output);

	if (ret != t->ret) {
		printf("Test %d failed, retval differs.\n", id);
		if (verbose) {
			printf("Expected retval == %d, received retval == %d\n",
			       t->ret, ret);
		}
		return 0;
	} else if (verbose) {
		printf("Return code matches.\n");
	}

	printf("Test %d passed.\n", id);
	return 0;
}

static int run_all(void)
{
	int failed = 0;
	int total = sizeof(testcases)/sizeof(testcases[0]);

	for (int i = 0; i < total; i++)
		failed += run_testcase(i, false);
	printf("%d of %d tests passed.\n", total-failed, total);
	printf("%d of %d tests failed.\n", failed, total);
	return failed;
}

int main(int argc, char **argv)
{
	if (argc == 2 && !strcmp(argv[1], "-r"))
		return test(stdin, stdout);

	if (argc == 2 && argv[1][0] != '-') {
		int id = atoi(argv[1]);
		if (id >= sizeof(testcases)/sizeof(testcases[0])) {
			fprintf(stderr, "Test %d doesn't exist.\n", id);
			return 1;
		}
		return run_testcase(id, true);
	}

	if (argc == 1)
		return run_all();
	return 1;
}

#endif